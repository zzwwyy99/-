<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\BH-F103.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\BH-F103.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Dec 14 21:24:49 2024
<BR><P>
<H3>Maximum Stack Usage =        188 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; BoradInit &rArr; DisplayDevInit &rArr; ShowNumberInDisplayDev &rArr; ShowTextInDisplayDev &rArr; DrawBitMapOnFrameBuffer &rArr; GetPixelColorFromFrameBuffer
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[69]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[69]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[69]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">ASCIIGetFontBitMap</a> from ascii_fontlib.o(i.ASCIIGetFontBitMap) referenced 2 times from ascii_fontlib.o(.data)
 <LI><a href="#[c]">ASCIIGetFontSize</a> from ascii_fontlib.o(i.ASCIIGetFontSize) referenced 2 times from ascii_fontlib.o(.data)
 <LI><a href="#[e]">BeepDeviceInit</a> from beep.o(i.BeepDeviceInit) referenced 2 times from beep.o(.data)
 <LI><a href="#[f]">BeepDevicePWMCfg</a> from beep.o(i.BeepDevicePWMCfg) referenced 2 times from beep.o(.data)
 <LI><a href="#[11]">BeepDevicePWMOff</a> from beep.o(i.BeepDevicePWMOff) referenced 2 times from beep.o(.data)
 <LI><a href="#[10]">BeepDevicePWMOn</a> from beep.o(i.BeepDevicePWMOn) referenced 2 times from beep.o(.data)
 <LI><a href="#[51]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[85]">ButtonInputDeviceCallBack</a> from button_input.o(i.ButtonInputDeviceCallBack) referenced from button_input.o(i.ButtonInputInit)
 <LI><a href="#[7]">ButtonInputInit</a> from button_input.o(i.ButtonInputInit) referenced 2 times from button_input.o(.data)
 <LI><a href="#[86]">ButtonTimerInit</a> from button_device.o(i.ButtonTimerInit) referenced from button_device.o(i.ConstrcutorButtonManage)
 <LI><a href="#[6c]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6d]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[62]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[63]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[64]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[65]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[66]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[67]">DMA1_Channel6_IRQHandler</a> from oled_command.o(i.DMA1_Channel6_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[68]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[54]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">DisplayDevTimerFlushControl</a> from display_device.o(i.DisplayDevTimerFlushControl) referenced 2 times from display_device.o(.data)
 <LI><a href="#[5d]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7f]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5e]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5f]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[60]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[61]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6e]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[46]">FKLPVisit</a> from logic_control.o(i.FKLPVisit) referenced 2 times from logic_control.o(.data)
 <LI><a href="#[43]">FKSPVisit</a> from logic_control.o(i.FKSPVisit) referenced 2 times from logic_control.o(.data)
 <LI><a href="#[5b]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">GAMEInfoOptionChooseFUN</a> from option.o(i.GAMEInfoOptionChooseFUN) referenced 2 times from option.o(.data)
 <LI><a href="#[2f]">GAMEInfoOptionEnterFUN</a> from option.o(i.GAMEInfoOptionEnterFUN) referenced 2 times from option.o(.data)
 <LI><a href="#[2c]">GAMESetOptionChooseFUN</a> from option.o(i.GAMESetOptionChooseFUN) referenced 2 times from option.o(.data)
 <LI><a href="#[2d]">GAMESetOptionEnterFUN</a> from option.o(i.GAMESetOptionEnterFUN) referenced 2 times from option.o(.data)
 <LI><a href="#[2a]">GAMEStartOptionChooseFUN</a> from option.o(i.GAMEStartOptionChooseFUN) referenced 2 times from option.o(.data)
 <LI><a href="#[2b]">GAMEStartOptionEnterFUN</a> from option.o(i.GAMEStartOptionEnterFUN) referenced 2 times from option.o(.data)
 <LI><a href="#[22]">GameChooseFUN</a> from option.o(i.GameChooseFUN) referenced 2 times from option.o(.data)
 <LI><a href="#[23]">GameEnterFUN</a> from option.o(i.GameEnterFUN) referenced 2 times from option.o(.data)
 <LI><a href="#[3a]">GameFirstKeyLongPressFun</a> from logic_control.o(i.GameFirstKeyLongPressFun) referenced 2 times from logic_control.o(.data)
 <LI><a href="#[37]">GameFirstKeyShortPressFun</a> from logic_control.o(i.GameFirstKeyShortPressFun) referenced 2 times from logic_control.o(.data)
 <LI><a href="#[3b]">GameSecondKeyLongPressFun</a> from logic_control.o(i.GameSecondKeyLongPressFun) referenced 2 times from logic_control.o(.data)
 <LI><a href="#[38]">GameSecondKeyShortPressFun</a> from logic_control.o(i.GameSecondKeyShortPressFun) referenced 2 times from logic_control.o(.data)
 <LI><a href="#[3c]">GameThirdKeyLongPressFun</a> from logic_control.o(i.GameThirdKeyLongPressFun) referenced 2 times from logic_control.o(.data)
 <LI><a href="#[39]">GameThirdKeyShortPressFun</a> from logic_control.o(i.GameThirdKeyShortPressFun) referenced 2 times from logic_control.o(.data)
 <LI><a href="#[94]">GameThreadEntry</a> from game_system.o(i.GameThreadEntry) referenced from main.o(i.main)
 <LI><a href="#[4b]">HandlerMenuMsg</a> from logic_control.o(i.HandlerMenuMsg) referenced 2 times from logic_control.o(.data)
 <LI><a href="#[4a]">HandlerPlayerMsg</a> from logic_control.o(i.HandlerPlayerMsg) referenced 2 times from logic_control.o(.data)
 <LI><a href="#[4c]">HandlerRTCMsg</a> from logic_control.o(i.HandlerRTCMsg) referenced 2 times from logic_control.o(.data)
 <LI><a href="#[4f]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">HomeChooseFUN</a> from option.o(i.HomeChooseFUN) referenced 2 times from option.o(.data)
 <LI><a href="#[1f]">HomeEnterFUN</a> from option.o(i.HomeEnterFUN) referenced 2 times from option.o(.data)
 <LI><a href="#[77]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[76]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[79]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[78]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4]">I2CDeviceDMACfg</a> from i2c.o(i.I2CDeviceDMACfg) referenced 2 times from i2c.o(.data)
 <LI><a href="#[5]">I2CDeviceDMAEnable</a> from i2c.o(i.I2CDeviceDMAEnable) referenced 2 times from i2c.o(.data)
 <LI><a href="#[3]">I2CDeviceInit</a> from i2c.o(i.I2CDeviceInit) referenced 2 times from i2c.o(.data)
 <LI><a href="#[28]">InfoChooseFUN</a> from option.o(i.InfoChooseFUN) referenced 2 times from option.o(.data)
 <LI><a href="#[29]">InfoEnterFUN</a> from option.o(i.InfoEnterFUN) referenced 2 times from option.o(.data)
 <LI><a href="#[2]">LedDeviceControl</a> from led.o(i.LedDeviceControl) referenced 4 times from led.o(.data)
 <LI><a href="#[1]">LedDeviceInit</a> from led.o(i.LedDeviceInit) referenced 4 times from led.o(.data)
 <LI><a href="#[91]">LogicThreadEntry</a> from logic_control.o(i.LogicThreadEntry) referenced from main.o(i.main)
 <LI><a href="#[50]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[40]">MenuFirstKeyLongPressFun</a> from logic_control.o(i.MenuFirstKeyLongPressFun) referenced 2 times from logic_control.o(.data)
 <LI><a href="#[3d]">MenuFirstKeyShortPressFun</a> from logic_control.o(i.MenuFirstKeyShortPressFun) referenced 2 times from logic_control.o(.data)
 <LI><a href="#[30]">MenuPublish</a> from option_manager.o(i.MenuPublish) referenced 2 times from option_manager.o(.data)
 <LI><a href="#[41]">MenuSecondKeyLongPressFun</a> from logic_control.o(i.MenuSecondKeyLongPressFun) referenced 2 times from logic_control.o(.data)
 <LI><a href="#[3e]">MenuSecondKeyShortPressFun</a> from logic_control.o(i.MenuSecondKeyShortPressFun) referenced 2 times from logic_control.o(.data)
 <LI><a href="#[42]">MenuThirdKeyLongPressFun</a> from logic_control.o(i.MenuThirdKeyLongPressFun) referenced 2 times from logic_control.o(.data)
 <LI><a href="#[3f]">MenuThirdKeyShortPressFun</a> from logic_control.o(i.MenuThirdKeyShortPressFun) referenced 2 times from logic_control.o(.data)
 <LI><a href="#[92]">MenuThreadEntry</a> from option_manager.o(i.MenuThreadEntry) referenced from main.o(i.main)
 <LI><a href="#[4e]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9]">OLEDDeviceFlush</a> from oled.o(i.OLEDDeviceFlush) referenced 2 times from oled.o(.data)
 <LI><a href="#[8]">OLEDDeviceInit</a> from oled.o(i.OLEDDeviceInit) referenced 2 times from oled.o(.data)
 <LI><a href="#[a]">OLEDDeviceSetPixel</a> from oled.o(i.OLEDDeviceSetPixel) referenced 2 times from oled.o(.data)
 <LI><a href="#[58]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[55]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">PlayerChooseFUN</a> from option.o(i.PlayerChooseFUN) referenced 2 times from option.o(.data)
 <LI><a href="#[25]">PlayerEnterFUN</a> from option.o(i.PlayerEnterFUN) referenced 2 times from option.o(.data)
 <LI><a href="#[34]">PlayerFirstKeyLongPressFun</a> from logic_control.o(i.PlayerFirstKeyLongPressFun) referenced 2 times from logic_control.o(.data)
 <LI><a href="#[31]">PlayerFirstKeyShortPressFun</a> from logic_control.o(i.PlayerFirstKeyShortPressFun) referenced 2 times from logic_control.o(.data)
 <LI><a href="#[12]">PlayerPublish</a> from player_system.o(i.PlayerPublish) referenced 2 times from player_system.o(.data)
 <LI><a href="#[35]">PlayerSecondKeyLongPressFun</a> from logic_control.o(i.PlayerSecondKeyLongPressFun) referenced 2 times from logic_control.o(.data)
 <LI><a href="#[32]">PlayerSecondKeyShortPressFun</a> from logic_control.o(i.PlayerSecondKeyShortPressFun) referenced 2 times from logic_control.o(.data)
 <LI><a href="#[36]">PlayerThirdKeyLongPressFun</a> from logic_control.o(i.PlayerThirdKeyLongPressFun) referenced 2 times from logic_control.o(.data)
 <LI><a href="#[33]">PlayerThirdKeyShortPressFun</a> from logic_control.o(i.PlayerThirdKeyShortPressFun) referenced 2 times from logic_control.o(.data)
 <LI><a href="#[93]">PlayerThreadEntry</a> from player_system.o(i.PlayerThreadEntry) referenced from main.o(i.main)
 <LI><a href="#[5c]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[80]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[0]">RTCPublish</a> from rtc_system.o(i.RTCPublish) referenced 2 times from rtc_system.o(.data)
 <LI><a href="#[5a]">RTC_IRQHandler</a> from rtc_system.o(i.RTC_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4d]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[47]">SKLPVisit</a> from logic_control.o(i.SKLPVisit) referenced 2 times from logic_control.o(.data)
 <LI><a href="#[44]">SKSPVisit</a> from logic_control.o(i.SKSPVisit) referenced 2 times from logic_control.o(.data)
 <LI><a href="#[7a]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7b]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[53]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">SetChooseFUN</a> from option.o(i.SetChooseFUN) referenced 2 times from option.o(.data)
 <LI><a href="#[27]">SetEnterFUN</a> from option.o(i.SetEnterFUN) referenced 2 times from option.o(.data)
 <LI><a href="#[49]">SubscribeMsg</a> from logic_control.o(i.SubscribeMsg) referenced 6 times from logic_control.o(.data)
 <LI><a href="#[56]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[83]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[59]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6f]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[72]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[71]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[70]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[73]">TIM2_IRQHandler</a> from drive_timer.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[74]">TIM3_IRQHandler</a> from drive_timer.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[75]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[48]">TKLPVisit</a> from logic_control.o(i.TKLPVisit) referenced 2 times from logic_control.o(.data)
 <LI><a href="#[45]">TKSPVisit</a> from logic_control.o(i.TKSPVisit) referenced 2 times from logic_control.o(.data)
 <LI><a href="#[20]">TempatureChooseFUN</a> from option.o(i.TempatureChooseFUN) referenced 2 times from option.o(.data)
 <LI><a href="#[21]">TempatureEnterFUN</a> from option.o(i.TempatureEnterFUN) referenced 2 times from option.o(.data)
 <LI><a href="#[7c]">USART1_IRQHandler</a> from drive_usart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7d]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7e]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[81]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6a]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6b]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[52]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[57]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[84]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[89]">audio_close</a> from player.o(i.audio_close) referenced from player.o(i.PlayerInit)
 <LI><a href="#[8a]">audio_control</a> from player.o(i.audio_control) referenced from player.o(i.PlayerInit)
 <LI><a href="#[87]">audio_init</a> from player.o(i.audio_init) referenced from player.o(i.PlayerInit)
 <LI><a href="#[88]">audio_open</a> from player.o(i.audio_open) referenced from player.o(i.PlayerInit)
 <LI><a href="#[8b]">audio_write</a> from player.o(i.audio_write) referenced from player.o(i.PlayerInit)
 <LI><a href="#[6]">button_cb</a> from button.o(i.button_cb) referenced 6 times from button.o(.data)
 <LI><a href="#[18]">control_dinosaur</a> from role.o(i.control_dinosaur) referenced 2 times from role.o(.data)
 <LI><a href="#[8d]">decode_control</a> from player.o(i.decode_control) referenced from player.o(i.PlayerInit)
 <LI><a href="#[8c]">decode_init</a> from player.o(i.decode_init) referenced from player.o(i.PlayerInit)
 <LI><a href="#[8e]">decode_read</a> from player.o(i.decode_read) referenced from player.o(i.PlayerInit)
 <LI><a href="#[16]">excute_cactus1</a> from role.o(i.excute_cactus1) referenced 2 times from role.o(.data)
 <LI><a href="#[17]">excute_cactus2</a> from role.o(i.excute_cactus2) referenced 2 times from role.o(.data)
 <LI><a href="#[13]">excute_cloud</a> from role.o(i.excute_cloud) referenced 4 times from role.o(.data)
 <LI><a href="#[19]">excute_dinosaur</a> from role.o(i.excute_dinosaur) referenced 2 times from role.o(.data)
 <LI><a href="#[15]">excute_ground</a> from role.o(i.excute_ground) referenced 2 times from role.o(.data)
 <LI><a href="#[1a]">excute_item</a> from role_manager.o(i.excute_item) referenced 2 times from role_manager.o(.data)
 <LI><a href="#[8f]">fputc</a> from drive_usart.o(i.fputc) referenced from printf3.o(i.__0printf$3)
 <LI><a href="#[82]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[90]">my_button_scan</a> from button_device.o(i.my_button_scan) referenced from button_device.o(i.__ButtonDevcieManagerInit)
 <LI><a href="#[14]">recover_data</a> from role.o(i.recover_data) referenced 12 times from role.o(.data)
 <LI><a href="#[1b]">recover_item</a> from role_manager.o(i.recover_item) referenced 2 times from role_manager.o(.data)
 <LI><a href="#[1c]">traversal_excute_item</a> from role_manager.o(i.traversal_excute_item) referenced 2 times from role_manager.o(.data)
 <LI><a href="#[1d]">traversal_recover_item</a> from role_manager.o(i.traversal_recover_item) referenced 2 times from role_manager.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[84]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[1a1]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[95]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[97]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1a2]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1a3]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1a4]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1a5]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1a6]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[4d]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a7]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[19d]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[55]"></a>PendSV_Handler</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19a]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_cloud
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_cactus2
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_cactus1
</UL>

<P><STRONG><a name="[1a9]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCIIGetFontBitMap
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandlerRTCMsg
</UL>

<P><STRONG><a name="[122]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGregorianDay
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputBuffer
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutInputBuffer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ButtonDevcieManagerInit
</UL>

<P><STRONG><a name="[1aa]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetI2CDevice
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetLedDevice
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterMessage
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreProcss
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetBeepDevice
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetFontLib
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetDisplayDevice
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSubscriber
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetOption
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetGameRole
</UL>

<P><STRONG><a name="[1ab]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[96]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1ac]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>ADDBeepDevice</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, beep_system.o(i.ADDBeepDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ADDBeepDevice &rArr; AddBeepDeviceBeep &rArr; BeepDeviceRegister &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBeepDeviceBeep
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoradInit
</UL>

<P><STRONG><a name="[9a]"></a>ADDDisplayDevice</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, display_system.o(i.ADDDisplayDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADDDisplayDevice &rArr; AddDisplayDeviceOLED &rArr; DisplayDeviceRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDisplayDeviceOLED
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDefaultDisplayDev
</UL>

<P><STRONG><a name="[9c]"></a>ADDFontLib</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fontlib_system.o(i.ADDFontLib))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADDFontLib &rArr; AddFontLibASCII &rArr; FontLibRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddFontLibASCII
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDefaultFontLib
</UL>

<P><STRONG><a name="[9e]"></a>ADDI2CDevice</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, i2c_system.o(i.ADDI2CDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADDI2CDevice &rArr; AddI2CDeviceI2C1 &rArr; I2CDeviceRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddI2CDeviceI2C1
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDInfDevInit
</UL>

<P><STRONG><a name="[d]"></a>ASCIIGetFontBitMap</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ascii_fontlib.o(i.ASCIIGetFontBitMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ASCIIGetFontBitMap
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ascii_fontlib.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>ASCIIGetFontSize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ascii_fontlib.o(i.ASCIIGetFontSize))
<BR>[Address Reference Count : 1]<UL><LI> ascii_fontlib.o(.data)
</UL>
<P><STRONG><a name="[99]"></a>AddBeepDeviceBeep</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, beep.o(i.AddBeepDeviceBeep))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AddBeepDeviceBeep &rArr; BeepDeviceRegister &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepDeviceRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADDBeepDevice
</UL>

<P><STRONG><a name="[a2]"></a>AddButtonDevice</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, button_system.o(i.AddButtonDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AddButtonDevice &rArr; AddButtonDeviceKEY &rArr; ButtonRegister &rArr; GPIOButtonInit &rArr; KAL_GPIOButtonInit &rArr; CAL_GPIOButtonInit &rArr; STD_GPIOButtonConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddButtonDeviceKEY
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ButtonDevcieManagerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoradInit
</UL>

<P><STRONG><a name="[a4]"></a>AddButtonDeviceKEY</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, button.o(i.AddButtonDeviceKEY))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AddButtonDeviceKEY &rArr; ButtonRegister &rArr; GPIOButtonInit &rArr; KAL_GPIOButtonInit &rArr; CAL_GPIOButtonInit &rArr; STD_GPIOButtonConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddButtonDevice
</UL>

<P><STRONG><a name="[a6]"></a>AddButtonInputDevice</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, button_input.o(i.AddButtonInputDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AddButtonInputDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputDeviceRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddInputDevice
</UL>

<P><STRONG><a name="[9b]"></a>AddDisplayDeviceOLED</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, oled.o(i.AddDisplayDeviceOLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AddDisplayDeviceOLED &rArr; DisplayDeviceRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDeviceRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADDDisplayDevice
</UL>

<P><STRONG><a name="[9d]"></a>AddFontLibASCII</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ascii_fontlib.o(i.AddFontLibASCII))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AddFontLibASCII &rArr; FontLibRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FontLibRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADDFontLib
</UL>

<P><STRONG><a name="[9f]"></a>AddI2CDeviceI2C1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, i2c.o(i.AddI2CDeviceI2C1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AddI2CDeviceI2C1 &rArr; I2CDeviceRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDeviceRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADDI2CDevice
</UL>

<P><STRONG><a name="[ab]"></a>AddInputDevice</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, input_system.o(i.AddInputDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AddInputDevice &rArr; AddButtonInputDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddButtonInputDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoradInit
</UL>

<P><STRONG><a name="[ac]"></a>AddLedDevice</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, led_system.o(i.AddLedDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AddLedDevice &rArr; AddLedDeviceToManager &rArr; LedDeviceRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLedDeviceToManager
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoradInit
</UL>

<P><STRONG><a name="[ad]"></a>AddLedDeviceToManager</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, led.o(i.AddLedDeviceToManager))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AddLedDeviceToManager &rArr; LedDeviceRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedDeviceRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLedDevice
</UL>

<P><STRONG><a name="[af]"></a>AddOptionToManager</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, option.o(i.AddOptionToManager))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AddOptionToManager &rArr; OptionRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMenuOption
</UL>

<P><STRONG><a name="[b1]"></a>AddRole</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, role_system.o(i.AddRole))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AddRole &rArr; AddRoleToManager &rArr; RoleRegister &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDefaultPLAYERDinosaur
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRoleToManager
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameThreadInit
</UL>

<P><STRONG><a name="[b2]"></a>AddRoleToManager</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, role.o(i.AddRoleToManager))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AddRoleToManager &rArr; RoleRegister &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoleRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRole
</UL>

<P><STRONG><a name="[b5]"></a>BKP_DeInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f10x_bkp.o(i.BKP_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_BackupResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcPeripheralConfig
</UL>

<P><STRONG><a name="[a1]"></a>BeepDeviceRegister</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, beep_device.o(i.BeepDeviceRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BeepDeviceRegister &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBeepDeviceBeep
</UL>

<P><STRONG><a name="[bc]"></a>BeepSongDecodeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, decode.o(i.BeepSongDecodeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BeepSongDecodeInit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepSongNewFreqTable
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_init
</UL>

<P><STRONG><a name="[be]"></a>BeepSongGetData</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, decode.o(i.BeepSongGetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BeepSongGetData &rArr; BeepSongDecode
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepSongDecode
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_read
</UL>

<P><STRONG><a name="[c0]"></a>BoradInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, main.o(i.BoradInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = BoradInit &rArr; DisplayDevInit &rArr; ShowNumberInDisplayDev &rArr; ShowTextInDisplayDev &rArr; DrawBitMapOnFrameBuffer &rArr; GetPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_Timer3Config
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCThreadInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerThreadInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuThreadInit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicThreadInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMenuOption
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitInputDevice
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameThreadInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDevInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLedDevice
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddInputDevice
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddButtonDevice
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADDBeepDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>ButtonRegister</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, button_device.o(i.ButtonRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ButtonRegister &rArr; GPIOButtonInit &rArr; KAL_GPIOButtonInit &rArr; CAL_GPIOButtonInit &rArr; STD_GPIOButtonConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOButtonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddButtonDeviceKEY
</UL>

<P><STRONG><a name="[d2]"></a>CAL_BeepDevicePWMCfg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cal_beep.o(i.CAL_BeepDevicePWMCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CAL_BeepDevicePWMCfg &rArr; STD_BeepDevicePWMCfg &rArr; TIM_OC3Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_BeepDevicePWMCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KAL_BeepDevicePWMCfg
</UL>

<P><STRONG><a name="[d4]"></a>CAL_BeepDevicePWMOff</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cal_beep.o(i.CAL_BeepDevicePWMOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CAL_BeepDevicePWMOff &rArr; STD_BeepDevicePWMOff &rArr; STD_BeepDevicePWMCfg &rArr; TIM_OC3Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_BeepDevicePWMOff
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KAL_BeepDevicePWMOff
</UL>

<P><STRONG><a name="[d6]"></a>CAL_BeepDevicePWMOn</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cal_beep.o(i.CAL_BeepDevicePWMOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CAL_BeepDevicePWMOn &rArr; STD_BeepDevicePWMOff &rArr; STD_BeepDevicePWMCfg &rArr; TIM_OC3Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_BeepDevicePWMOff
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KAL_BeepDevicePWMOn
</UL>

<P><STRONG><a name="[d7]"></a>CAL_GPIOButtonInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cal_button.o(i.CAL_GPIOButtonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAL_GPIOButtonInit &rArr; STD_GPIOButtonConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_GPIOButtonConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KAL_GPIOButtonInit
</UL>

<P><STRONG><a name="[d9]"></a>CAL_GPIOI2CDevInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cal_i2c.o(i.CAL_GPIOI2CDevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CAL_GPIOI2CDevInit &rArr; STD_GPIOI2CDevConfig &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_GPIOI2CDevConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KAL_GPIOI2CDevInit
</UL>

<P><STRONG><a name="[db]"></a>CAL_GPIOLedDevControl</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cal_led.o(i.CAL_GPIOLedDevControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAL_GPIOLedDevControl
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_GPIOLedDevControl
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KAL_GPIOLedDevControl
</UL>

<P><STRONG><a name="[dd]"></a>CAL_GPIOLedDevInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cal_led.o(i.CAL_GPIOLedDevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAL_GPIOLedDevInit &rArr; STD_GPIOLedDevConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_GPIOLedDevConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KAL_GPIOLedDevInit
</UL>

<P><STRONG><a name="[df]"></a>CAL_HardwareBeepDevInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cal_beep.o(i.CAL_HardwareBeepDevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAL_HardwareBeepDevInit &rArr; STD_GPIOBeepDevConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_GPIOBeepDevConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KAL_HardwareBeepDevInit
</UL>

<P><STRONG><a name="[e1]"></a>CAL_I2CDMACfg</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, cal_i2c.o(i.CAL_I2CDMACfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CAL_I2CDMACfg &rArr; STD_I2CDMACfg &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_I2CDMACfg
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KAL_I2CDMACfg
</UL>

<P><STRONG><a name="[e3]"></a>CAL_I2CDMAEnable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cal_i2c.o(i.CAL_I2CDMAEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAL_I2CDMAEnable &rArr; STD_I2CDMAEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_I2CDMAEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KAL_I2CDMAEnable
</UL>

<P><STRONG><a name="[e5]"></a>CAL_TimerInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cal_timer.o(i.CAL_TimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAL_TimerInit &rArr; STD_TimerConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_TimerConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KAL_TimerInit
</UL>

<P><STRONG><a name="[e7]"></a>ClearGraphInDisplayDev</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, show_graph.o(i.ClearGraphInDisplayDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ClearGraphInDisplayDev &rArr; ClearGraphBitMapOnFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearGraphBitMapOnFrameBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_dinosaur
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_cloud
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_cactus
</UL>

<P><STRONG><a name="[110]"></a>ClearInDisplayDev</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, show_graph.o(i.ClearInDisplayDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ClearInDisplayDev
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempatureEnterFUN
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempatureChooseFUN
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChooseFUN
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerEnterFUN
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerChooseFUN
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InfoChooseFUN
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameChooseFUN
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAMEStartOptionChooseFUN
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameRunning
</UL>

<P><STRONG><a name="[eb]"></a>CoreProcss</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, message_manager.o(i.CoreProcss))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CoreProcss &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCPublish
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerPublish
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuPublish
</UL>

<P><STRONG><a name="[c6]"></a>DHT11Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dht11_device.o(i.DHT11Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DHT11Init &rArr; STD_DHT11GpioConfigure &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_DHT11GpioConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoradInit
</UL>

<P><STRONG><a name="[f2]"></a>DHT11ReceiveData</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, dht11_device.o(i.DHT11ReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DHT11ReceiveData &rArr; DHT11Start &rArr; Delay_ms &rArr; Delay_10us
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11Start
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11ReceiveByte
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11ReceiveAck
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempatureEnterFUN
</UL>

<P><STRONG><a name="[67]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, oled_command.o(i.DMA1_Channel6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel6_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f7]"></a>DMA_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
</UL>

<P><STRONG><a name="[16b]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_I2CDMAEnable
</UL>

<P><STRONG><a name="[168]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_I2CDMACfg
</UL>

<P><STRONG><a name="[f6]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
</UL>

<P><STRONG><a name="[16a]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_I2CDMACfg
</UL>

<P><STRONG><a name="[169]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_I2CDMACfg
</UL>

<P><STRONG><a name="[16c]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_SetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_I2CDMAEnable
</UL>

<P><STRONG><a name="[54]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[196]"></a>DefaultDinosaurCollisionJUDGE</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, role_system.o(i.DefaultDinosaurCollisionJUDGE))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;excute_item
</UL>

<P><STRONG><a name="[fd]"></a>DefaultDinosaurJUMP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, role_system.o(i.DefaultDinosaurJUMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DefaultDinosaurJUMP
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultGameControl
</UL>

<P><STRONG><a name="[fc]"></a>DefaultGameControl</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, game_system.o(i.DefaultGameControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DefaultGameControl &rArr; GameRunning &rArr; ClearInDisplayDev
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameRunning
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultDinosaurJUMP
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameThirdKeyShortPressFun
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameSecondKeyShortPressFun
</UL>

<P><STRONG><a name="[ff]"></a>DefaultPlayerControl</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, player_system.o(i.DefaultPlayerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DefaultPlayerControl &rArr; PlayerNext
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerStop
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerPlay
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerNext
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerLast
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerThirdKeyShortPressFun
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerThirdKeyLongPressFun
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerSecondKeyShortPressFun
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerSecondKeyLongPressFun
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerFirstKeyShortPressFun
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerFirstKeyLongPressFun
</UL>

<P><STRONG><a name="[ef]"></a>Delay_10us</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, drive_delay.o(i.Delay_10us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay_10us
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11Start
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11ReceiveByte
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11ReceiveAck
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[f5]"></a>Delay_ms</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, drive_delay.o(i.Delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Delay_ms &rArr; Delay_10us
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_10us
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11Start
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempatureEnterFUN
</UL>

<P><STRONG><a name="[c3]"></a>DisplayDevInit</STRONG> (Thumb, 402 bytes, Stack size 24 bytes, displaydev_init.o(i.DisplayDevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = DisplayDevInit &rArr; ShowNumberInDisplayDev &rArr; ShowTextInDisplayDev &rArr; DrawBitMapOnFrameBuffer &rArr; GetPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTextInDisplayDev
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowNumberInDisplayDev
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDefaultFontLib
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_clear
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDefaultDisplayDev
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DisplayDevTimerFlushControl
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoradInit
</UL>

<P><STRONG><a name="[b]"></a>DisplayDevTimerFlushControl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, display_device.o(i.DisplayDevTimerFlushControl))
<BR>[Address Reference Count : 1]<UL><LI> display_device.o(.data)
</UL>
<P><STRONG><a name="[a8]"></a>DisplayDeviceRegister</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, display_device.o(i.DisplayDeviceRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DisplayDeviceRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDisplayDeviceOLED
</UL>

<P><STRONG><a name="[173]"></a>EncodeStr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, encode_str.o(i.EncodeStr))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTextInDisplayDev
</UL>

<P><STRONG><a name="[a9]"></a>FontLibRegister</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fontlib_manager.o(i.FontLibRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FontLibRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddFontLibASCII
</UL>

<P><STRONG><a name="[2e]"></a>GAMEInfoOptionChooseFUN</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, option.o(i.GAMEInfoOptionChooseFUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = GAMEInfoOptionChooseFUN &rArr; ShowTextInDisplayDev &rArr; DrawBitMapOnFrameBuffer &rArr; GetPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTextInDisplayDev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> option.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>GAMEInfoOptionEnterFUN</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, option.o(i.GAMEInfoOptionEnterFUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GAMEInfoOptionEnterFUN &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> option.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>GAMESetOptionChooseFUN</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, option.o(i.GAMESetOptionChooseFUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = GAMESetOptionChooseFUN &rArr; ShowTextInDisplayDev &rArr; DrawBitMapOnFrameBuffer &rArr; GetPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTextInDisplayDev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> option.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>GAMESetOptionEnterFUN</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, option.o(i.GAMESetOptionEnterFUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GAMESetOptionEnterFUN &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> option.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>GAMEStartOptionChooseFUN</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, option.o(i.GAMEStartOptionChooseFUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = GAMEStartOptionChooseFUN &rArr; ShowTextInDisplayDev &rArr; DrawBitMapOnFrameBuffer &rArr; GetPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearInDisplayDev
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTextInDisplayDev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> option.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>GAMEStartOptionEnterFUN</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, option.o(i.GAMEStartOptionEnterFUN))
<BR>[Address Reference Count : 1]<UL><LI> option.o(.data)
</UL>
<P><STRONG><a name="[165]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_GPIOBeepDevConfig
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_GPIOI2CDevConfig
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_GPIOLedDevConfig
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_GPIOButtonConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_DHT11GpioConfigure
</UL>

<P><STRONG><a name="[f0]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11ReceiveByte
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11ReceiveAck
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_button_scan
</UL>

<P><STRONG><a name="[f4]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11Start
</UL>

<P><STRONG><a name="[22]"></a>GameChooseFUN</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, option.o(i.GameChooseFUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = GameChooseFUN &rArr; ShowGraphInDisplayDev &rArr; DrawGraphBitMapOnFrameBuffer &rArr; GetGraphPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowGraphInDisplayDev
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearInDisplayDev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> option.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>GameEnterFUN</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, option.o(i.GameEnterFUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GameEnterFUN &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> option.o(.data)
</UL>
<P><STRONG><a name="[fe]"></a>GameRunning</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, game_system.o(i.GameRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GameRunning &rArr; ClearInDisplayDev
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearInDisplayDev
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultGameControl
</UL>

<P><STRONG><a name="[114]"></a>GameShow</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, game_system.o(i.GameShow))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = GameShow &rArr; ShowNumberInDisplayDev &rArr; ShowTextInDisplayDev &rArr; DrawBitMapOnFrameBuffer &rArr; GetPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTextInDisplayDev
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowNumberInDisplayDev
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameThreadEntry
</UL>

<P><STRONG><a name="[fb]"></a>GameStop</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, game_system.o(i.GameStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = GameStop &rArr; ShowTextInDisplayDev &rArr; DrawBitMapOnFrameBuffer &rArr; GetPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowGraphInDisplayDev
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTextInDisplayDev
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultDinosaurCollisionEXCUTE
</UL>

<P><STRONG><a name="[94]"></a>GameThreadEntry</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, game_system.o(i.GameThreadEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = GameThreadEntry &rArr; GameShow &rArr; ShowNumberInDisplayDev &rArr; ShowTextInDisplayDev &rArr; DrawBitMapOnFrameBuffer &rArr; GetPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowGraphInDisplayDev
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameShow
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[c7]"></a>GameThreadInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, game_system.o(i.GameThreadInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GameThreadInit &rArr; AddRole &rArr; AddRoleToManager &rArr; RoleRegister &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGame
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRole
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoradInit
</UL>

<P><STRONG><a name="[118]"></a>GetBeepDevice</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, beep_system.o(i.GetBeepDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetBeepDevice &rArr; __GetBeepDevice &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetBeepDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
</UL>

<P><STRONG><a name="[18b]"></a>GetBeepSongLen</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, decode.o(i.GetBeepSongLen))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_control
</UL>

<P><STRONG><a name="[18a]"></a>GetBeepSongName</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, decode.o(i.GetBeepSongName))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_control
</UL>

<P><STRONG><a name="[11a]"></a>GetDisplayDevice</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, display_system.o(i.GetDisplayDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetDisplayDevice &rArr; __GetDisplayDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetDisplayDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDefaultDisplayDev
</UL>

<P><STRONG><a name="[174]"></a>GetFontBitMap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fontlib_system.o(i.GetFontBitMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetFontBitMap
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTextInDisplayDev
</UL>

<P><STRONG><a name="[11e]"></a>GetFontLib</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fontlib_system.o(i.GetFontLib))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetFontLib &rArr; __GetFontLib &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetFontLib
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDefaultFontLib
</UL>

<P><STRONG><a name="[115]"></a>GetGame</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, game_system.o(i.GetGame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetGame
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetGame
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameThreadInit
</UL>

<P><STRONG><a name="[123]"></a>GetI2CDevice</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, i2c_system.o(i.GetI2CDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetI2CDevice &rArr; __GetI2CDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetI2CDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDInfDevInit
</UL>

<P><STRONG><a name="[125]"></a>GetInputBuffer</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, input_buffer.o(i.GetInputBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetInputBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicThreadEntry
</UL>

<P><STRONG><a name="[126]"></a>GetLedDevice</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, led_system.o(i.GetLedDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetLedDevice &rArr; __GetLedDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetLedDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempatureEnterFUN
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateLedOpen
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateLedClose
</UL>

<P><STRONG><a name="[11d]"></a>GetNodeFirstChild</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, node_manager.o(i.GetNodeFirstChild))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEnterOption
</UL>

<P><STRONG><a name="[117]"></a>GetNodeParent</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, node_manager.o(i.GetNodeParent))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBackOption
</UL>

<P><STRONG><a name="[129]"></a>GetNodeRightSibling</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, node_manager.o(i.GetNodeRightSibling))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextOption
</UL>

<P><STRONG><a name="[12a]"></a>GetNormalTime</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, convert.o(i.GetNormalTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GetNormalTime &rArr; GetGregorianDay
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGregorianDay
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCNormalTime
</UL>

<P><STRONG><a name="[150]"></a>GetUnixTime</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, convert.o(i.GetUnixTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetUnixTime
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCTimeStamp
</UL>

<P><STRONG><a name="[4b]"></a>HandlerMenuMsg</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, logic_control.o(i.HandlerMenuMsg))
<BR>[Address Reference Count : 1]<UL><LI> logic_control.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>HandlerPlayerMsg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, logic_control.o(i.HandlerPlayerMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HandlerPlayerMsg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic_control.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>HandlerRTCMsg</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, logic_control.o(i.HandlerRTCMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = HandlerRTCMsg &rArr; ShowNumberInDisplayDev &rArr; ShowTextInDisplayDev &rArr; DrawBitMapOnFrameBuffer &rArr; GetPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTextInDisplayDev
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowNumberInDisplayDev
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic_control.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>HomeChooseFUN</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, option.o(i.HomeChooseFUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HomeChooseFUN &rArr; ShowGraphInDisplayDev &rArr; DrawGraphBitMapOnFrameBuffer &rArr; GetGraphPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowGraphInDisplayDev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> option.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>HomeEnterFUN</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, option.o(i.HomeEnterFUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HomeEnterFUN &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> option.o(.data)
</UL>
<P><STRONG><a name="[aa]"></a>I2CDeviceRegister</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, i2c_device.o(i.I2CDeviceRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2CDeviceRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddI2CDeviceI2C1
</UL>

<P><STRONG><a name="[13c]"></a>I2C_CheckEvent</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f10x_i2c.o(i.I2C_CheckEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_CheckEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDByteSend
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_gram_refresh_dma
</UL>

<P><STRONG><a name="[166]"></a>I2C_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_GPIOI2CDevConfig
</UL>

<P><STRONG><a name="[19c]"></a>I2C_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>

<P><STRONG><a name="[13b]"></a>I2C_GenerateSTART</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_GenerateSTART))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDByteSend
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_gram_refresh_dma
</UL>

<P><STRONG><a name="[f8]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_GenerateSTOP))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDByteSend
</UL>

<P><STRONG><a name="[13a]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f10x_i2c.o(i.I2C_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDByteSend
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_gram_refresh_dma
</UL>

<P><STRONG><a name="[12e]"></a>I2C_Init</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, stm32f10x_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_GPIOI2CDevConfig
</UL>

<P><STRONG><a name="[13d]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_Send7bitAddress))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDByteSend
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_gram_refresh_dma
</UL>

<P><STRONG><a name="[13e]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDByteSend
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_gram_refresh_dma
</UL>

<P><STRONG><a name="[fa]"></a>IndicateLedClose</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, role_manager.o(i.IndicateLedClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IndicateLedClose &rArr; GetLedDevice &rArr; __GetLedDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLedDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultDinosaurCollisionEXCUTE
</UL>

<P><STRONG><a name="[130]"></a>IndicateLedOpen</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, role_manager.o(i.IndicateLedOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IndicateLedOpen &rArr; GetLedDevice &rArr; __GetLedDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLedDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversal_recover_item
</UL>

<P><STRONG><a name="[28]"></a>InfoChooseFUN</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, option.o(i.InfoChooseFUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = InfoChooseFUN &rArr; ShowGraphInDisplayDev &rArr; DrawGraphBitMapOnFrameBuffer &rArr; GetGraphPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowGraphInDisplayDev
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearInDisplayDev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> option.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>InfoEnterFUN</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, option.o(i.InfoEnterFUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InfoEnterFUN &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> option.o(.data)
</UL>
<P><STRONG><a name="[c2]"></a>InitInputDevice</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, input_system.o(i.InitInputDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitInputDevice &rArr; __InitInputDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__InitInputDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoradInit
</UL>

<P><STRONG><a name="[c4]"></a>InitMenuOption</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, option_manager.o(i.InitMenuOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = InitMenuOption &rArr; __GetOption &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetOption
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddOptionToManager
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoradInit
</UL>

<P><STRONG><a name="[a7]"></a>InputDeviceRegister</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, input_device.o(i.InputDeviceRegister))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddButtonInputDevice
</UL>

<P><STRONG><a name="[b8]"></a>KAL_BeepDevicePWMCfg</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, kal_beep.o(i.KAL_BeepDevicePWMCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = KAL_BeepDevicePWMCfg &rArr; CAL_BeepDevicePWMCfg &rArr; STD_BeepDevicePWMCfg &rArr; TIM_OC3Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_BeepDevicePWMCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepDevicePWMCfg
</UL>

<P><STRONG><a name="[b9]"></a>KAL_BeepDevicePWMOff</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, kal_beep.o(i.KAL_BeepDevicePWMOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = KAL_BeepDevicePWMOff &rArr; CAL_BeepDevicePWMOff &rArr; STD_BeepDevicePWMOff &rArr; STD_BeepDevicePWMCfg &rArr; TIM_OC3Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_BeepDevicePWMOff
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepDevicePWMOff
</UL>

<P><STRONG><a name="[ba]"></a>KAL_BeepDevicePWMOn</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, kal_beep.o(i.KAL_BeepDevicePWMOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = KAL_BeepDevicePWMOn &rArr; CAL_BeepDevicePWMOn &rArr; STD_BeepDevicePWMOff &rArr; STD_BeepDevicePWMCfg &rArr; TIM_OC3Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_BeepDevicePWMOn
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepDevicePWMOn
</UL>

<P><STRONG><a name="[111]"></a>KAL_GPIOButtonInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, kal_button.o(i.KAL_GPIOButtonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = KAL_GPIOButtonInit &rArr; CAL_GPIOButtonInit &rArr; STD_GPIOButtonConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_GPIOButtonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOButtonInit
</UL>

<P><STRONG><a name="[12d]"></a>KAL_GPIOI2CDevInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, kal_i2c.o(i.KAL_GPIOI2CDevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = KAL_GPIOI2CDevInit &rArr; CAL_GPIOI2CDevInit &rArr; STD_GPIOI2CDevConfig &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_GPIOI2CDevInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDeviceInit
</UL>

<P><STRONG><a name="[133]"></a>KAL_GPIOLedDevControl</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, kal_led.o(i.KAL_GPIOLedDevControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KAL_GPIOLedDevControl &rArr; CAL_GPIOLedDevControl
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_GPIOLedDevControl
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedDeviceControl
</UL>

<P><STRONG><a name="[134]"></a>KAL_GPIOLedDevInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, kal_led.o(i.KAL_GPIOLedDevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = KAL_GPIOLedDevInit &rArr; CAL_GPIOLedDevInit &rArr; STD_GPIOLedDevConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_GPIOLedDevInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedDeviceInit
</UL>

<P><STRONG><a name="[b7]"></a>KAL_HardwareBeepDevInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, kal_beep.o(i.KAL_HardwareBeepDevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = KAL_HardwareBeepDevInit &rArr; CAL_HardwareBeepDevInit &rArr; STD_GPIOBeepDevConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_HardwareBeepDevInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepDeviceInit
</UL>

<P><STRONG><a name="[12b]"></a>KAL_I2CDMACfg</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, kal_i2c.o(i.KAL_I2CDMACfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KAL_I2CDMACfg &rArr; CAL_I2CDMACfg &rArr; STD_I2CDMACfg &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_I2CDMACfg
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDeviceDMACfg
</UL>

<P><STRONG><a name="[12c]"></a>KAL_I2CDMAEnable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, kal_i2c.o(i.KAL_I2CDMAEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KAL_I2CDMAEnable &rArr; CAL_I2CDMAEnable &rArr; STD_I2CDMAEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_I2CDMAEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDeviceDMAEnable
</UL>

<P><STRONG><a name="[d1]"></a>KAL_TimerInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, kal_timer.o(i.KAL_TimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = KAL_TimerInit &rArr; CAL_TimerInit &rArr; STD_TimerConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_TimerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonTimerInit
</UL>

<P><STRONG><a name="[ae]"></a>LedDeviceRegister</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, led_device.o(i.LedDeviceRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LedDeviceRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLedDeviceToManager
</UL>

<P><STRONG><a name="[91]"></a>LogicThreadEntry</STRONG> (Thumb, 364 bytes, Stack size 48 bytes, logic_control.o(i.LogicThreadEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LogicThreadEntry &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputBuffer
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[cc]"></a>LogicThreadInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, logic_control.o(i.LogicThreadInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LogicThreadInit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoradInit
</UL>

<P><STRONG><a name="[50]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>MenuPublish</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, option_manager.o(i.MenuPublish))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MenuPublish &rArr; CoreProcss &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreProcss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> option_manager.o(.data)
</UL>
<P><STRONG><a name="[92]"></a>MenuThreadEntry</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, option_manager.o(i.MenuThreadEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MenuThreadEntry &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[c9]"></a>MenuThreadInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, option_manager.o(i.MenuThreadInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MenuThreadInit &rArr; RegisterMessage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterMessage
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoradInit
</UL>

<P><STRONG><a name="[4e]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[138]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcNvicConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_I2CDMACfg
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_TimerConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_Timer3Config
</UL>

<P><STRONG><a name="[137]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[144]"></a>NodeRegisterToTREE</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, node_manager.o(i.NodeRegisterToTREE))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionRegister
</UL>

<P><STRONG><a name="[13f]"></a>OLEDCommandSend</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, oled_command.o(i.OLEDCommandSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLEDCommandSend &rArr; OLEDByteSend &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDByteSend
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_setcursor
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>

<P><STRONG><a name="[140]"></a>OLEDDataSend</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, oled_command.o(i.OLEDDataSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLEDDataSend &rArr; OLEDByteSend &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDByteSend
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_clear
</UL>

<P><STRONG><a name="[113]"></a>OptionControl</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, option_manager.o(i.OptionControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OptionControl &rArr; GetNextOption &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextOption
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEnterOption
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBackOption
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerSecondKeyLongPressFun
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuThirdKeyShortPressFun
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuThirdKeyLongPressFun
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuSecondKeyShortPressFun
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuSecondKeyLongPressFun
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFirstKeyShortPressFun
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFirstKeyLongPressFun
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameFirstKeyShortPressFun
</UL>

<P><STRONG><a name="[b0]"></a>OptionRegister</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, option_manager.o(i.OptionRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OptionRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NodeRegisterToTREE
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddOptionToManager
</UL>

<P><STRONG><a name="[15a]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcPeripheralConfig
</UL>

<P><STRONG><a name="[147]"></a>PlayerAddSong</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, player_system.o(i.PlayerAddSong))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerInit
</UL>

<P><STRONG><a name="[24]"></a>PlayerChooseFUN</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, option.o(i.PlayerChooseFUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = PlayerChooseFUN &rArr; ShowGraphInDisplayDev &rArr; DrawGraphBitMapOnFrameBuffer &rArr; GetGraphPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowGraphInDisplayDev
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearInDisplayDev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> option.o(.data)
</UL>
<P><STRONG><a name="[145]"></a>PlayerControl</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, player_system.o(i.PlayerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PlayerControl &rArr; PlayerNext
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerStop
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerPlay
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerNext
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerLast
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerInit
</UL>

<P><STRONG><a name="[25]"></a>PlayerEnterFUN</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, option.o(i.PlayerEnterFUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = PlayerEnterFUN &rArr; ShowTextInDisplayDev &rArr; DrawBitMapOnFrameBuffer &rArr; GetPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearInDisplayDev
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTextInDisplayDev
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> option.o(.data)
</UL>
<P><STRONG><a name="[146]"></a>PlayerInit</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, player.o(i.PlayerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PlayerInit &rArr; PlayerShow &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerStart
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerShow
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerControl
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerAddSong
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerThreadInit
</UL>

<P><STRONG><a name="[102]"></a>PlayerLast</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, player_system.o(i.PlayerLast))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PlayerLast
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerPlay
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultPlayerControl
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerControl
</UL>

<P><STRONG><a name="[103]"></a>PlayerNext</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, player_system.o(i.PlayerNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PlayerNext
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerPlay
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerThreadEntry
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultPlayerControl
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerControl
</UL>

<P><STRONG><a name="[100]"></a>PlayerPlay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, player_system.o(i.PlayerPlay))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerNext
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerLast
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultPlayerControl
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerControl
</UL>

<P><STRONG><a name="[12]"></a>PlayerPublish</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, player_system.o(i.PlayerPublish))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PlayerPublish &rArr; CoreProcss &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreProcss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> player_system.o(.data)
</UL>
<P><STRONG><a name="[149]"></a>PlayerShow</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, player_system.o(i.PlayerShow))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PlayerShow &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerThreadEntry
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerInit
</UL>

<P><STRONG><a name="[148]"></a>PlayerStart</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, player_system.o(i.PlayerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PlayerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerInit
</UL>

<P><STRONG><a name="[101]"></a>PlayerStop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, player_system.o(i.PlayerStop))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultPlayerControl
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerControl
</UL>

<P><STRONG><a name="[93]"></a>PlayerThreadEntry</STRONG> (Thumb, 190 bytes, Stack size 80 bytes, player_system.o(i.PlayerThreadEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PlayerThreadEntry &rArr; PlayerShow &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerNext
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerShow
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[ca]"></a>PlayerThreadInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, player_system.o(i.PlayerThreadInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PlayerThreadInit &rArr; PlayerInit &rArr; PlayerShow &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterMessage
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoradInit
</UL>

<P><STRONG><a name="[cd]"></a>PutInputBuffer</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, input_buffer.o(i.PutInputBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PutInputBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonInputDeviceCallBack
</UL>

<P><STRONG><a name="[167]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_I2CDMACfg
</UL>

<P><STRONG><a name="[159]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcPeripheralConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_BeepDevicePWMCfg
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_GPIOI2CDevConfig
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_TimerConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_Timer3Config
</UL>

<P><STRONG><a name="[164]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_GPIOBeepDevConfig
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_GPIOI2CDevConfig
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_GPIOLedDevConfig
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_GPIOButtonConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_DHT11GpioConfigure
</UL>

<P><STRONG><a name="[b6]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_BackupResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
</UL>

<P><STRONG><a name="[12f]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[15c]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcPeripheralConfig
</UL>

<P><STRONG><a name="[15b]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_LSICmd))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcPeripheralConfig
</UL>

<P><STRONG><a name="[15e]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_RTCCLKCmd))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcPeripheralConfig
</UL>

<P><STRONG><a name="[15d]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_RTCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcPeripheralConfig
</UL>

<P><STRONG><a name="[c8]"></a>RTCInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rtc_system.o(i.RTCInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTCInit &rArr; RtcNvicInit &rArr; RtcNvicConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcNvicInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCTimeStamp
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoradInit
</UL>

<P><STRONG><a name="[14c]"></a>RTCNormalTime</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rtc_device.o(i.RTCNormalTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RTCNormalTime &rArr; GetNormalTime &rArr; GetGregorianDay
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNormalTime
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[0]"></a>RTCPublish</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtc_system.o(i.RTCPublish))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RTCPublish &rArr; CoreProcss &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreProcss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_system.o(.data)
</UL>
<P><STRONG><a name="[cb]"></a>RTCThreadInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtc_system.o(i.RTCThreadInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTCThreadInit &rArr; RegisterMessage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterMessage
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoradInit
</UL>

<P><STRONG><a name="[14a]"></a>RTCTimeStamp</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rtc_device.o(i.RTCTimeStamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTCTimeStamp &rArr; RtcPeripheralConfig &rArr; BKP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUnixTime
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcPeripheralConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[153]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[154]"></a>RTC_EnterConfigMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_EnterConfigMode))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcPeripheralConfig
</UL>

<P><STRONG><a name="[155]"></a>RTC_ExitConfigMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ExitConfigMode))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcPeripheralConfig
</UL>

<P><STRONG><a name="[14d]"></a>RTC_GetCounter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCNormalTime
</UL>

<P><STRONG><a name="[152]"></a>RTC_GetITStatus</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[5a]"></a>RTC_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rtc_system.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RTC_IRQHandler &rArr; RTCNormalTime &rArr; GetNormalTime &rArr; GetGregorianDay
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetITStatus
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCNormalTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[160]"></a>RTC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcPeripheralConfig
</UL>

<P><STRONG><a name="[151]"></a>RTC_SetCounter</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32f10x_rtc.o(i.RTC_SetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCTimeStamp
</UL>

<P><STRONG><a name="[156]"></a>RTC_SetPrescaler</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f10x_rtc.o(i.RTC_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetPrescaler
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcPeripheralConfig
</UL>

<P><STRONG><a name="[14f]"></a>RTC_WaitForLastTask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_WaitForLastTask))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCTimeStamp
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcPeripheralConfig
</UL>

<P><STRONG><a name="[15f]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcPeripheralConfig
</UL>

<P><STRONG><a name="[1a0]"></a>RecoverSpeedIndex</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, role_system.o(i.RecoverSpeedIndex))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversal_recover_item
</UL>

<P><STRONG><a name="[135]"></a>RegisterMessage</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, message_manager.o(i.RegisterMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegisterMessage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCThreadInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerThreadInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuThreadInit
</UL>

<P><STRONG><a name="[157]"></a>RegisterSubscriber</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, message_manager.o(i.RegisterSubscriber))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegisterSubscriber &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubscribeMsg
</UL>

<P><STRONG><a name="[b4]"></a>RoleRegister</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, role_manager.o(i.RoleRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RoleRegister &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRoleToManager
</UL>

<P><STRONG><a name="[158]"></a>RtcNvicConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drive_rtc.o(i.RtcNvicConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RtcNvicConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcNvicInit
</UL>

<P><STRONG><a name="[14b]"></a>RtcNvicInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rtc_device.o(i.RtcNvicInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RtcNvicInit &rArr; RtcNvicConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcNvicConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>

<P><STRONG><a name="[14e]"></a>RtcPeripheralConfig</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, drive_rtc.o(i.RtcPeripheralConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RtcPeripheralConfig &rArr; BKP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSICmd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCTimeStamp
</UL>

<P><STRONG><a name="[d3]"></a>STD_BeepDevicePWMCfg</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, drive_pwm.o(i.STD_BeepDevicePWMCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = STD_BeepDevicePWMCfg &rArr; TIM_OC3Init
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_BeepDevicePWMCfg
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_BeepDevicePWMOff
</UL>

<P><STRONG><a name="[d5]"></a>STD_BeepDevicePWMOff</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drive_pwm.o(i.STD_BeepDevicePWMOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = STD_BeepDevicePWMOff &rArr; STD_BeepDevicePWMCfg &rArr; TIM_OC3Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_BeepDevicePWMCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_BeepDevicePWMOn
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_BeepDevicePWMOff
</UL>

<P><STRONG><a name="[ed]"></a>STD_DHT11GpioConfigure</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drive_gpio.o(i.STD_DHT11GpioConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = STD_DHT11GpioConfigure &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11Init
</UL>

<P><STRONG><a name="[e0]"></a>STD_GPIOBeepDevConfig</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drive_pwm.o(i.STD_GPIOBeepDevConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = STD_GPIOBeepDevConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_HardwareBeepDevInit
</UL>

<P><STRONG><a name="[d8]"></a>STD_GPIOButtonConfig</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, drive_gpio.o(i.STD_GPIOButtonConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = STD_GPIOButtonConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_GPIOButtonInit
</UL>

<P><STRONG><a name="[da]"></a>STD_GPIOI2CDevConfig</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, drive_i2c.o(i.STD_GPIOI2CDevConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = STD_GPIOI2CDevConfig &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_GPIOI2CDevInit
</UL>

<P><STRONG><a name="[de]"></a>STD_GPIOLedDevConfig</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drive_gpio.o(i.STD_GPIOLedDevConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = STD_GPIOLedDevConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_GPIOLedDevInit
</UL>

<P><STRONG><a name="[dc]"></a>STD_GPIOLedDevControl</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, drive_gpio.o(i.STD_GPIOLedDevControl))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_GPIOLedDevControl
</UL>

<P><STRONG><a name="[e2]"></a>STD_I2CDMACfg</STRONG> (Thumb, 112 bytes, Stack size 72 bytes, drive_i2c.o(i.STD_I2CDMACfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = STD_I2CDMACfg &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_I2CDMACfg
</UL>

<P><STRONG><a name="[e4]"></a>STD_I2CDMAEnable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drive_i2c.o(i.STD_I2CDMAEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STD_I2CDMAEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_I2CDMAEnable
</UL>

<P><STRONG><a name="[c5]"></a>STD_Timer3Config</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, drive_timer.o(i.STD_Timer3Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = STD_Timer3Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoradInit
</UL>

<P><STRONG><a name="[e6]"></a>STD_TimerConfig</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, drive_timer.o(i.STD_TimerConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = STD_TimerConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_TimerInit
</UL>

<P><STRONG><a name="[53]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>SetButtonInputDeviceCallBack</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, button.o(i.SetButtonInputDeviceCallBack))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonInputInit
</UL>

<P><STRONG><a name="[26]"></a>SetChooseFUN</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, option.o(i.SetChooseFUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SetChooseFUN &rArr; ShowGraphInDisplayDev &rArr; DrawGraphBitMapOnFrameBuffer &rArr; GetGraphPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowGraphInDisplayDev
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearInDisplayDev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> option.o(.data)
</UL>
<P><STRONG><a name="[105]"></a>SetDefaultDisplayDev</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, display_system.o(i.SetDefaultDisplayDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetDefaultDisplayDev &rArr; GetDisplayDevice &rArr; __GetDisplayDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayDevice
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADDDisplayDevice
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDevInit
</UL>

<P><STRONG><a name="[107]"></a>SetDefaultFontLib</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fontlib_system.o(i.SetDefaultFontLib))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetDefaultFontLib &rArr; GetFontLib &rArr; __GetFontLib &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFontLib
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADDFontLib
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDevInit
</UL>

<P><STRONG><a name="[27]"></a>SetEnterFUN</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, option.o(i.SetEnterFUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetEnterFUN &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> option.o(.data)
</UL>
<P><STRONG><a name="[185]"></a>SetTimerProcessFunction</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drive_timer.o(i.SetTimerProcessFunction))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ButtonDevcieManagerInit
</UL>

<P><STRONG><a name="[112]"></a>ShowGraphInDisplayDev</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, show_graph.o(i.ShowGraphInDisplayDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ShowGraphInDisplayDev &rArr; DrawGraphBitMapOnFrameBuffer &rArr; GetGraphPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawGraphBitMapOnFrameBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameThreadEntry
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempatureChooseFUN
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChooseFUN
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerChooseFUN
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InfoChooseFUN
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeChooseFUN
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameChooseFUN
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameStop
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_ground
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_dinosaur
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_cloud
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_cactus
</UL>

<P><STRONG><a name="[108]"></a>ShowNumberInDisplayDev</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, show_text.o(i.ShowNumberInDisplayDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = ShowNumberInDisplayDev &rArr; ShowTextInDisplayDev &rArr; DrawBitMapOnFrameBuffer &rArr; GetPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTextInDisplayDev
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDevInit
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandlerRTCMsg
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempatureEnterFUN
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameShow
</UL>

<P><STRONG><a name="[109]"></a>ShowTextInDisplayDev</STRONG> (Thumb, 74 bytes, Stack size 64 bytes, show_text.o(i.ShowTextInDisplayDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ShowTextInDisplayDev &rArr; DrawBitMapOnFrameBuffer &rArr; GetPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeStr
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBitMapOnFrameBuffer
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFontBitMap
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDevInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowNumberInDisplayDev
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandlerRTCMsg
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempatureEnterFUN
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerEnterFUN
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAMEStartOptionChooseFUN
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAMESetOptionChooseFUN
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAMEInfoOptionChooseFUN
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameShow
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameStop
</UL>

<P><STRONG><a name="[56]"></a>SysTick_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>TIM2_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drive_timer.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerFlushDisplayDev
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>TIM3_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drive_timer.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM3_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingDelay_Decrement
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16e]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_TimerConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_Timer3Config
</UL>

<P><STRONG><a name="[104]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_10us
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_BeepDevicePWMCfg
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_TimerConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_Timer3Config
</UL>

<P><STRONG><a name="[175]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[16d]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_TimerConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_Timer3Config
</UL>

<P><STRONG><a name="[162]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_BeepDevicePWMCfg
</UL>

<P><STRONG><a name="[163]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_BeepDevicePWMCfg
</UL>

<P><STRONG><a name="[161]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_BeepDevicePWMCfg
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_TimerConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STD_Timer3Config
</UL>

<P><STRONG><a name="[20]"></a>TempatureChooseFUN</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, option.o(i.TempatureChooseFUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = TempatureChooseFUN &rArr; ShowGraphInDisplayDev &rArr; DrawGraphBitMapOnFrameBuffer &rArr; GetGraphPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowGraphInDisplayDev
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearInDisplayDev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> option.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>TempatureEnterFUN</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, option.o(i.TempatureEnterFUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = TempatureEnterFUN &rArr; ShowNumberInDisplayDev &rArr; ShowTextInDisplayDev &rArr; DrawBitMapOnFrameBuffer &rArr; GetPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11ReceiveData
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLedDevice
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearInDisplayDev
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTextInDisplayDev
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowNumberInDisplayDev
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> option.o(.data)
</UL>
<P><STRONG><a name="[176]"></a>TimerFlushDisplayDev</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, display_system.o(i.TimerFlushDisplayDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimerFlushDisplayDev
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[177]"></a>TimingDelay_Decrement</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drive_delay.o(i.TimingDelay_Decrement))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[7c]"></a>USART1_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drive_usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_write
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17d]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[17a]"></a>USART_Config</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, drive_usart.o(i.USART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
</UL>

<P><STRONG><a name="[182]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendString
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
</UL>

<P><STRONG><a name="[17c]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[17b]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[178]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[181]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
</UL>

<P><STRONG><a name="[52]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>UsartInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usart_init.o(i.UsartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = UsartInit &rArr; USART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendString
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoradInit
</UL>

<P><STRONG><a name="[17f]"></a>Usart_SendByte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, drive_usart.o(i.Usart_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendString
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
</UL>

<P><STRONG><a name="[180]"></a>Usart_SendString</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drive_usart.o(i.Usart_SendString))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Usart_SendString &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
</UL>

<P><STRONG><a name="[183]"></a>__0printf$3</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1af]"></a>__1printf$3</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3), UNUSED)

<P><STRONG><a name="[bb]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11ReceiveData
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterMessage
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreProcss
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCThreadInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerThreadInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerThreadEntry
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuThreadInit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuThreadEntry
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicThreadInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicThreadEntry
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameThreadEntry
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDevInit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerShow
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepSongDecodeInit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetBeepDevice
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepDeviceRegister
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDefaultFontLib
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDefaultDisplayDev
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonInputDeviceCallBack
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandlerPlayerMsg
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerThirdKeyShortPressFun
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerThirdKeyLongPressFun
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerSecondKeyShortPressFun
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerSecondKeyLongPressFun
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerFirstKeyShortPressFun
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerFirstKeyLongPressFun
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuThirdKeyShortPressFun
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuThirdKeyLongPressFun
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuSecondKeyShortPressFun
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuSecondKeyLongPressFun
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFirstKeyShortPressFun
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFirstKeyLongPressFun
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameThirdKeyShortPressFun
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameThirdKeyLongPressFun
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameSecondKeyShortPressFun
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameSecondKeyLongPressFun
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameFirstKeyShortPressFun
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameFirstKeyLongPressFun
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSubscriber
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetOption
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextOption
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEnterOption
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBackOption
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempatureEnterFUN
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEnterFUN
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerEnterFUN
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InfoEnterFUN
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeEnterFUN
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameEnterFUN
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAMESetOptionEnterFUN
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAMEInfoOptionEnterFUN
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameRunning
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDefaultPLAYERDinosaur
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoleRegister
</UL>

<P><STRONG><a name="[a3]"></a>__ButtonDevcieManagerInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, button_device.o(i.__ButtonDevcieManagerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __ButtonDevcieManagerInit &rArr; ConstrcutorButtonManage &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimerProcessFunction
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstrcutorButtonManage
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddButtonDevice
</UL>

<P><STRONG><a name="[10b]"></a>__DisplayDevTimerFlushControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, display_device.o(i.__DisplayDevTimerFlushControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __DisplayDevTimerFlushControl
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDevInit
</UL>

<P><STRONG><a name="[119]"></a>__GetBeepDevice</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, beep_device.o(i.__GetBeepDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __GetBeepDevice &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBeepDevice
</UL>

<P><STRONG><a name="[11b]"></a>__GetDisplayDevice</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, display_device.o(i.__GetDisplayDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __GetDisplayDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplayDevice
</UL>

<P><STRONG><a name="[11f]"></a>__GetFontLib</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fontlib_manager.o(i.__GetFontLib))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __GetFontLib &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFontLib
</UL>

<P><STRONG><a name="[120]"></a>__GetGame</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, game.o(i.__GetGame))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGame
</UL>

<P><STRONG><a name="[16f]"></a>__GetGameRole</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, role_manager.o(i.__GetGameRole))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __GetGameRole &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDefaultPLAYERDinosaur
</UL>

<P><STRONG><a name="[124]"></a>__GetI2CDevice</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, i2c_device.o(i.__GetI2CDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __GetI2CDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetI2CDevice
</UL>

<P><STRONG><a name="[127]"></a>__GetLedDevice</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, led_device.o(i.__GetLedDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __GetLedDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLedDevice
</UL>

<P><STRONG><a name="[132]"></a>__GetOption</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, option_manager.o(i.__GetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __GetOption &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMenuOption
</UL>

<P><STRONG><a name="[131]"></a>__InitInputDevice</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, input_device.o(i.__InitInputDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __InitInputDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitInputDevice
</UL>

<P><STRONG><a name="[1b0]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1b1]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1b2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[6]"></a>button_cb</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, button.o(i.button_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = button_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.data)
</UL>
<P><STRONG><a name="[10a]"></a>delay</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, drive_delay.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayerThreadEntry
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameThreadEntry
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDevInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_write
</UL>

<P><STRONG><a name="[8f]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, drive_usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf3.o(i.__0printf$3)
</UL>
<P><STRONG><a name="[82]"></a>main</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = main &rArr; BoradInit &rArr; DisplayDevInit &rArr; ShowNumberInDisplayDev &rArr; ShowTextInDisplayDev &rArr; DrawBitMapOnFrameBuffer &rArr; GetPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoradInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[ea]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstrcutorButtonManage
</UL>

<P><STRONG><a name="[90]"></a>my_button_scan</STRONG> (Thumb, 374 bytes, Stack size 16 bytes, button_device.o(i.my_button_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = my_button_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_device.o(i.__ButtonDevcieManagerInit)
</UL>
<P><STRONG><a name="[106]"></a>oled_clear</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, oled_command.o(i.oled_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = oled_clear &rArr; oled_setcursor &rArr; OLEDCommandSend &rArr; OLEDByteSend &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_setcursor
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDDataSend
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDevInit
</UL>

<P><STRONG><a name="[141]"></a>oled_gram_refresh_dma</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, oled_command.o(i.oled_gram_refresh_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = oled_gram_refresh_dma &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDDeviceFlush
</UL>

<P><STRONG><a name="[142]"></a>oled_init</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, oled_command.o(i.oled_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = oled_init &rArr; OLEDInfDevInit &rArr; GetI2CDevice &rArr; __GetI2CDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMACmd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDCommandSend
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDInfDevInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDDeviceInit
</UL>

<P><STRONG><a name="[19b]"></a>oled_setcursor</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, oled_command.o(i.oled_setcursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = oled_setcursor &rArr; OLEDCommandSend &rArr; OLEDByteSend &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDCommandSend
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_clear
</UL>

<P><STRONG><a name="[17e]"></a>ring_buffer_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ring_buffer.o(i.ring_buffer_init))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartInit
</UL>

<P><STRONG><a name="[179]"></a>ring_buffer_write</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ring_buffer.o(i.ring_buffer_write))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[19f]"></a>rt_hw_stack_init</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, cpuport.o(i.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[ce]"></a>rt_schedule</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicThreadEntry
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonInputDeviceCallBack
</UL>

<P><STRONG><a name="[197]"></a>rt_system_scheduler_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scheduler.o(i.rt_system_scheduler_init))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[199]"></a>rt_system_scheduler_start</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, scheduler.o(i.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_system_scheduler_start
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[198]"></a>rt_thread_init</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, thread.o(i.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_thread_init &rArr; rt_hw_stack_init
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[170]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[171]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[136]"></a>NVIC_Configuration</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, drive_usart.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[121]"></a>GetGregorianDay</STRONG> (Thumb, 146 bytes, Stack size 72 bytes, convert.o(i.GetGregorianDay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GetGregorianDay
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNormalTime
</UL>

<P><STRONG><a name="[2]"></a>LedDeviceControl</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, led.o(i.LedDeviceControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LedDeviceControl &rArr; KAL_GPIOLedDevControl &rArr; CAL_GPIOLedDevControl
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KAL_GPIOLedDevControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>LedDeviceInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, led.o(i.LedDeviceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LedDeviceInit &rArr; KAL_GPIOLedDevInit &rArr; CAL_GPIOLedDevInit &rArr; STD_GPIOLedDevConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KAL_GPIOLedDevInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.data)
</UL>
<P><STRONG><a name="[ee]"></a>DHT11ReceiveAck</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dht11_device.o(i.DHT11ReceiveAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DHT11ReceiveAck &rArr; Delay_10us
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_10us
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11ReceiveData
</UL>

<P><STRONG><a name="[f1]"></a>DHT11ReceiveByte</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dht11_device.o(i.DHT11ReceiveByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DHT11ReceiveByte &rArr; Delay_10us
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_10us
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11ReceiveData
</UL>

<P><STRONG><a name="[f3]"></a>DHT11Start</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dht11_device.o(i.DHT11Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DHT11Start &rArr; Delay_ms &rArr; Delay_10us
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_10us
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11ReceiveData
</UL>

<P><STRONG><a name="[4]"></a>I2CDeviceDMACfg</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, i2c.o(i.I2CDeviceDMACfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = I2CDeviceDMACfg &rArr; KAL_I2CDMACfg &rArr; CAL_I2CDMACfg &rArr; STD_I2CDMACfg &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KAL_I2CDMACfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>I2CDeviceDMAEnable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, i2c.o(i.I2CDeviceDMAEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2CDeviceDMAEnable &rArr; KAL_I2CDMAEnable &rArr; CAL_I2CDMAEnable &rArr; STD_I2CDMAEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KAL_I2CDMAEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>I2CDeviceInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, i2c.o(i.I2CDeviceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = I2CDeviceInit &rArr; KAL_GPIOI2CDevInit &rArr; CAL_GPIOI2CDevInit &rArr; STD_GPIOI2CDevConfig &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KAL_GPIOI2CDevInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.data)
</UL>
<P><STRONG><a name="[86]"></a>ButtonTimerInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, button_device.o(i.ButtonTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ButtonTimerInit &rArr; KAL_TimerInit &rArr; CAL_TimerInit &rArr; STD_TimerConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KAL_TimerInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_device.o(i.ConstrcutorButtonManage)
</UL>
<P><STRONG><a name="[e9]"></a>ConstrcutorButtonManage</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, button_device.o(i.ConstrcutorButtonManage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ConstrcutorButtonManage &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ButtonDevcieManagerInit
</UL>

<P><STRONG><a name="[d0]"></a>GPIOButtonInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, button_device.o(i.GPIOButtonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GPIOButtonInit &rArr; KAL_GPIOButtonInit &rArr; CAL_GPIOButtonInit &rArr; STD_GPIOButtonConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KAL_GPIOButtonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonRegister
</UL>

<P><STRONG><a name="[85]"></a>ButtonInputDeviceCallBack</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, button_input.o(i.ButtonInputDeviceCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ButtonInputDeviceCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutInputBuffer
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_input.o(i.ButtonInputInit)
</UL>
<P><STRONG><a name="[7]"></a>ButtonInputInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, button_input.o(i.ButtonInputInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ButtonInputInit
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetButtonInputDeviceCallBack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_input.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>OLEDDeviceFlush</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, oled.o(i.OLEDDeviceFlush))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLEDDeviceFlush &rArr; oled_gram_refresh_dma &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_gram_refresh_dma
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oled.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>OLEDDeviceInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, oled.o(i.OLEDDeviceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OLEDDeviceInit &rArr; oled_init &rArr; OLEDInfDevInit &rArr; GetI2CDevice &rArr; __GetI2CDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oled.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>OLEDDeviceSetPixel</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, oled.o(i.OLEDDeviceSetPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OLEDDeviceSetPixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oled.o(.data)
</UL>
<P><STRONG><a name="[139]"></a>OLEDByteSend</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, oled_command.o(i.OLEDByteSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLEDByteSend &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDDataSend
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLEDCommandSend
</UL>

<P><STRONG><a name="[143]"></a>OLEDInfDevInit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, oled_command.o(i.OLEDInfDevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OLEDInfDevInit &rArr; GetI2CDevice &rArr; __GetI2CDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetI2CDevice
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADDI2CDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>

<P><STRONG><a name="[10c]"></a>DrawBitMapOnFrameBuffer</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, show_text.o(i.DrawBitMapOnFrameBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DrawBitMapOnFrameBuffer &rArr; GetPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPixelColorFromFrameBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTextInDisplayDev
</UL>

<P><STRONG><a name="[10d]"></a>GetPixelColorFromFrameBuffer</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, show_text.o(i.GetPixelColorFromFrameBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetPixelColorFromFrameBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBitMapOnFrameBuffer
</UL>

<P><STRONG><a name="[172]"></a>reverse</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, show_text.o(i.reverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = reverse
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowNumberInDisplayDev
</UL>

<P><STRONG><a name="[e]"></a>BeepDeviceInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, beep.o(i.BeepDeviceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BeepDeviceInit &rArr; KAL_HardwareBeepDevInit &rArr; CAL_HardwareBeepDevInit &rArr; STD_GPIOBeepDevConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KAL_HardwareBeepDevInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> beep.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>BeepDevicePWMCfg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, beep.o(i.BeepDevicePWMCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BeepDevicePWMCfg &rArr; KAL_BeepDevicePWMCfg &rArr; CAL_BeepDevicePWMCfg &rArr; STD_BeepDevicePWMCfg &rArr; TIM_OC3Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KAL_BeepDevicePWMCfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> beep.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>BeepDevicePWMOff</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, beep.o(i.BeepDevicePWMOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BeepDevicePWMOff &rArr; KAL_BeepDevicePWMOff &rArr; CAL_BeepDevicePWMOff &rArr; STD_BeepDevicePWMOff &rArr; STD_BeepDevicePWMCfg &rArr; TIM_OC3Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KAL_BeepDevicePWMOff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> beep.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>BeepDevicePWMOn</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, beep.o(i.BeepDevicePWMOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BeepDevicePWMOn &rArr; KAL_BeepDevicePWMOn &rArr; CAL_BeepDevicePWMOn &rArr; STD_BeepDevicePWMOff &rArr; STD_BeepDevicePWMCfg &rArr; TIM_OC3Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KAL_BeepDevicePWMOn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> beep.o(.data)
</UL>
<P><STRONG><a name="[bf]"></a>BeepSongDecode</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, decode.o(i.BeepSongDecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BeepSongDecode
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepSongGetData
</UL>

<P><STRONG><a name="[bd]"></a>BeepSongNewFreqTable</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, decode.o(i.BeepSongNewFreqTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BeepSongNewFreqTable
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepSongDecodeInit
</UL>

<P><STRONG><a name="[89]"></a>audio_close</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, player.o(i.audio_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = audio_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> player.o(i.PlayerInit)
</UL>
<P><STRONG><a name="[8a]"></a>audio_control</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, player.o(i.audio_control))
<BR>[Address Reference Count : 1]<UL><LI> player.o(i.PlayerInit)
</UL>
<P><STRONG><a name="[87]"></a>audio_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, player.o(i.audio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = audio_init &rArr; GetBeepDevice &rArr; __GetBeepDevice &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLedDevice
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBeepDevice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> player.o(i.PlayerInit)
</UL>
<P><STRONG><a name="[88]"></a>audio_open</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, player.o(i.audio_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = audio_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> player.o(i.PlayerInit)
</UL>
<P><STRONG><a name="[8b]"></a>audio_write</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, player.o(i.audio_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = audio_write
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> player.o(i.PlayerInit)
</UL>
<P><STRONG><a name="[8d]"></a>decode_control</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, player.o(i.decode_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = decode_control
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBeepSongName
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBeepSongLen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> player.o(i.PlayerInit)
</UL>
<P><STRONG><a name="[8c]"></a>decode_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, player.o(i.decode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = decode_init &rArr; BeepSongDecodeInit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepSongDecodeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> player.o(i.PlayerInit)
</UL>
<P><STRONG><a name="[8e]"></a>decode_read</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, player.o(i.decode_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = decode_read &rArr; BeepSongGetData &rArr; BeepSongDecode
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepSongGetData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> player.o(i.PlayerInit)
</UL>
<P><STRONG><a name="[e8]"></a>ClearGraphBitMapOnFrameBuffer</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, show_graph.o(i.ClearGraphBitMapOnFrameBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ClearGraphBitMapOnFrameBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearGraphInDisplayDev
</UL>

<P><STRONG><a name="[10e]"></a>DrawGraphBitMapOnFrameBuffer</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, show_graph.o(i.DrawGraphBitMapOnFrameBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DrawGraphBitMapOnFrameBuffer &rArr; GetGraphPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGraphPixelColorFromFrameBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowGraphInDisplayDev
</UL>

<P><STRONG><a name="[10f]"></a>GetGraphPixelColorFromFrameBuffer</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, show_graph.o(i.GetGraphPixelColorFromFrameBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetGraphPixelColorFromFrameBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawGraphBitMapOnFrameBuffer
</UL>

<P><STRONG><a name="[187]"></a>clear_cactus</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, role.o(i.clear_cactus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clear_cactus &rArr; ClearGraphInDisplayDev &rArr; ClearGraphBitMapOnFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearGraphInDisplayDev
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;excute_cactus2
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;excute_cactus1
</UL>

<P><STRONG><a name="[188]"></a>clear_cloud</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, role.o(i.clear_cloud))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clear_cloud &rArr; ClearGraphInDisplayDev &rArr; ClearGraphBitMapOnFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearGraphInDisplayDev
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;excute_cloud
</UL>

<P><STRONG><a name="[189]"></a>clear_dinosaur</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, role.o(i.clear_dinosaur))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clear_dinosaur &rArr; ClearGraphInDisplayDev &rArr; ClearGraphBitMapOnFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearGraphInDisplayDev
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;excute_dinosaur
</UL>

<P><STRONG><a name="[193]"></a>clear_ground</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, role.o(i.clear_ground))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;excute_ground
</UL>

<P><STRONG><a name="[18]"></a>control_dinosaur</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, role.o(i.control_dinosaur))
<BR>[Address Reference Count : 1]<UL><LI> role.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>excute_cactus1</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, role.o(i.excute_cactus1))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = excute_cactus1 &rArr; load_cactus &rArr; ShowGraphInDisplayDev &rArr; DrawGraphBitMapOnFrameBuffer &rArr; GetGraphPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_cactus1
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_cactus
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_cactus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> role.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>excute_cactus2</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, role.o(i.excute_cactus2))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = excute_cactus2 &rArr; load_cactus &rArr; ShowGraphInDisplayDev &rArr; DrawGraphBitMapOnFrameBuffer &rArr; GetGraphPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_cactus2
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_cactus
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_cactus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> role.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>excute_cloud</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, role.o(i.excute_cloud))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = excute_cloud &rArr; load_cloud &rArr; ShowGraphInDisplayDev &rArr; DrawGraphBitMapOnFrameBuffer &rArr; GetGraphPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_cloud
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_cloud
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_cloud
</UL>
<BR>[Address Reference Count : 1]<UL><LI> role.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>excute_dinosaur</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, role.o(i.excute_dinosaur))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = excute_dinosaur &rArr; load_dinosaur &rArr; ShowGraphInDisplayDev &rArr; DrawGraphBitMapOnFrameBuffer &rArr; GetGraphPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_dinosaur
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_dinosaur
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_dinosaur
</UL>
<BR>[Address Reference Count : 1]<UL><LI> role.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>excute_ground</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, role.o(i.excute_ground))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = excute_ground &rArr; load_ground &rArr; ShowGraphInDisplayDev &rArr; DrawGraphBitMapOnFrameBuffer &rArr; GetGraphPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_ground
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_ground
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_ground
</UL>
<BR>[Address Reference Count : 1]<UL><LI> role.o(.data)
</UL>
<P><STRONG><a name="[18d]"></a>load_cactus</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, role.o(i.load_cactus))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = load_cactus &rArr; ShowGraphInDisplayDev &rArr; DrawGraphBitMapOnFrameBuffer &rArr; GetGraphPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowGraphInDisplayDev
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;excute_cactus2
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;excute_cactus1
</UL>

<P><STRONG><a name="[190]"></a>load_cloud</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, role.o(i.load_cloud))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = load_cloud &rArr; ShowGraphInDisplayDev &rArr; DrawGraphBitMapOnFrameBuffer &rArr; GetGraphPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowGraphInDisplayDev
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;excute_cloud
</UL>

<P><STRONG><a name="[192]"></a>load_dinosaur</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, role.o(i.load_dinosaur))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = load_dinosaur &rArr; ShowGraphInDisplayDev &rArr; DrawGraphBitMapOnFrameBuffer &rArr; GetGraphPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowGraphInDisplayDev
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;excute_dinosaur
</UL>

<P><STRONG><a name="[195]"></a>load_ground</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, role.o(i.load_ground))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = load_ground &rArr; ShowGraphInDisplayDev &rArr; DrawGraphBitMapOnFrameBuffer &rArr; GetGraphPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowGraphInDisplayDev
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;excute_ground
</UL>

<P><STRONG><a name="[18c]"></a>move_cactus1</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, role.o(i.move_cactus1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = move_cactus1
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;excute_cactus1
</UL>

<P><STRONG><a name="[18e]"></a>move_cactus2</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, role.o(i.move_cactus2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = move_cactus2
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;excute_cactus2
</UL>

<P><STRONG><a name="[18f]"></a>move_cloud</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, role.o(i.move_cloud))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = move_cloud
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;excute_cloud
</UL>

<P><STRONG><a name="[191]"></a>move_dinosaur</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, role.o(i.move_dinosaur))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = move_dinosaur
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;excute_dinosaur
</UL>

<P><STRONG><a name="[194]"></a>move_ground</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, role.o(i.move_ground))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;excute_ground
</UL>

<P><STRONG><a name="[14]"></a>recover_data</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, role.o(i.recover_data))
<BR>[Address Reference Count : 1]<UL><LI> role.o(.data)
</UL>
<P><STRONG><a name="[f9]"></a>DefaultDinosaurCollisionEXCUTE</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, role_manager.o(i.DefaultDinosaurCollisionEXCUTE))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = DefaultDinosaurCollisionEXCUTE &rArr; GameStop &rArr; ShowTextInDisplayDev &rArr; DrawBitMapOnFrameBuffer &rArr; GetPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameStop
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateLedClose
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;excute_item
</UL>

<P><STRONG><a name="[1a]"></a>excute_item</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, role_manager.o(i.excute_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = excute_item &rArr; DefaultDinosaurCollisionEXCUTE &rArr; GameStop &rArr; ShowTextInDisplayDev &rArr; DrawBitMapOnFrameBuffer &rArr; GetPixelColorFromFrameBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultDinosaurCollisionJUDGE
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultDinosaurCollisionEXCUTE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> role_manager.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>recover_item</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, role_manager.o(i.recover_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = recover_item
</UL>
<BR>[Address Reference Count : 1]<UL><LI> role_manager.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>traversal_excute_item</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, role_manager.o(i.traversal_excute_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = traversal_excute_item
</UL>
<BR>[Address Reference Count : 1]<UL><LI> role_manager.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>traversal_recover_item</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, role_manager.o(i.traversal_recover_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = traversal_recover_item &rArr; IndicateLedOpen &rArr; GetLedDevice &rArr; __GetLedDevice &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverSpeedIndex
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateLedOpen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> role_manager.o(.data)
</UL>
<P><STRONG><a name="[b3]"></a>SetDefaultPLAYERDinosaur</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, role_system.o(i.SetDefaultPLAYERDinosaur))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetDefaultPLAYERDinosaur &rArr; __GetGameRole &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetGameRole
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRole
</UL>

<P><STRONG><a name="[116]"></a>GetBackOption</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, option_manager.o(i.GetBackOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetBackOption &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNodeParent
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionControl
</UL>

<P><STRONG><a name="[11c]"></a>GetEnterOption</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, option_manager.o(i.GetEnterOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetEnterOption &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNodeFirstChild
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionControl
</UL>

<P><STRONG><a name="[128]"></a>GetNextOption</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, option_manager.o(i.GetNextOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetNextOption &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNodeRightSibling
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionControl
</UL>

<P><STRONG><a name="[46]"></a>FKLPVisit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, logic_control.o(i.FKLPVisit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FKLPVisit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic_control.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>FKSPVisit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, logic_control.o(i.FKSPVisit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FKSPVisit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic_control.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>GameFirstKeyLongPressFun</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, logic_control.o(i.GameFirstKeyLongPressFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GameFirstKeyLongPressFun &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic_control.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>GameFirstKeyShortPressFun</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, logic_control.o(i.GameFirstKeyShortPressFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GameFirstKeyShortPressFun &rArr; OptionControl &rArr; GetNextOption &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionControl
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic_control.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>GameSecondKeyLongPressFun</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, logic_control.o(i.GameSecondKeyLongPressFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GameSecondKeyLongPressFun &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic_control.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>GameSecondKeyShortPressFun</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, logic_control.o(i.GameSecondKeyShortPressFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GameSecondKeyShortPressFun &rArr; DefaultGameControl &rArr; GameRunning &rArr; ClearInDisplayDev
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultGameControl
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic_control.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>GameThirdKeyLongPressFun</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, logic_control.o(i.GameThirdKeyLongPressFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GameThirdKeyLongPressFun &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic_control.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>GameThirdKeyShortPressFun</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, logic_control.o(i.GameThirdKeyShortPressFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GameThirdKeyShortPressFun &rArr; DefaultGameControl &rArr; GameRunning &rArr; ClearInDisplayDev
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultGameControl
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic_control.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>MenuFirstKeyLongPressFun</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, logic_control.o(i.MenuFirstKeyLongPressFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MenuFirstKeyLongPressFun &rArr; OptionControl &rArr; GetNextOption &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionControl
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic_control.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>MenuFirstKeyShortPressFun</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, logic_control.o(i.MenuFirstKeyShortPressFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MenuFirstKeyShortPressFun &rArr; OptionControl &rArr; GetNextOption &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionControl
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic_control.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>MenuSecondKeyLongPressFun</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, logic_control.o(i.MenuSecondKeyLongPressFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MenuSecondKeyLongPressFun &rArr; OptionControl &rArr; GetNextOption &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionControl
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic_control.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>MenuSecondKeyShortPressFun</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, logic_control.o(i.MenuSecondKeyShortPressFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MenuSecondKeyShortPressFun &rArr; OptionControl &rArr; GetNextOption &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionControl
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic_control.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>MenuThirdKeyLongPressFun</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, logic_control.o(i.MenuThirdKeyLongPressFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MenuThirdKeyLongPressFun &rArr; OptionControl &rArr; GetNextOption &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionControl
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic_control.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>MenuThirdKeyShortPressFun</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, logic_control.o(i.MenuThirdKeyShortPressFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MenuThirdKeyShortPressFun &rArr; OptionControl &rArr; GetNextOption &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionControl
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic_control.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>PlayerFirstKeyLongPressFun</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, logic_control.o(i.PlayerFirstKeyLongPressFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PlayerFirstKeyLongPressFun &rArr; DefaultPlayerControl &rArr; PlayerNext
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultPlayerControl
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic_control.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>PlayerFirstKeyShortPressFun</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, logic_control.o(i.PlayerFirstKeyShortPressFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PlayerFirstKeyShortPressFun &rArr; DefaultPlayerControl &rArr; PlayerNext
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultPlayerControl
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic_control.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>PlayerSecondKeyLongPressFun</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, logic_control.o(i.PlayerSecondKeyLongPressFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PlayerSecondKeyLongPressFun &rArr; OptionControl &rArr; GetNextOption &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultPlayerControl
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptionControl
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic_control.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>PlayerSecondKeyShortPressFun</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, logic_control.o(i.PlayerSecondKeyShortPressFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PlayerSecondKeyShortPressFun &rArr; DefaultPlayerControl &rArr; PlayerNext
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultPlayerControl
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic_control.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>PlayerThirdKeyLongPressFun</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, logic_control.o(i.PlayerThirdKeyLongPressFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PlayerThirdKeyLongPressFun &rArr; DefaultPlayerControl &rArr; PlayerNext
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultPlayerControl
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic_control.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>PlayerThirdKeyShortPressFun</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, logic_control.o(i.PlayerThirdKeyShortPressFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PlayerThirdKeyShortPressFun &rArr; DefaultPlayerControl &rArr; PlayerNext
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultPlayerControl
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic_control.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>SKLPVisit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, logic_control.o(i.SKLPVisit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SKLPVisit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic_control.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>SKSPVisit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, logic_control.o(i.SKSPVisit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SKSPVisit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic_control.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>SubscribeMsg</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, logic_control.o(i.SubscribeMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SubscribeMsg &rArr; RegisterSubscriber &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSubscriber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic_control.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>TKLPVisit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, logic_control.o(i.TKLPVisit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TKLPVisit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic_control.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>TKSPVisit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, logic_control.o(i.TKSPVisit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TKSPVisit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic_control.o(.data)
</UL>
<P><STRONG><a name="[184]"></a>_printf_core</STRONG> (Thumb, 436 bytes, Stack size 96 bytes, printf3.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$3
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
